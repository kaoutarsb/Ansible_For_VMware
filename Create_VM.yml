---
- name: Create a Windows Server VM from template
  hosts: localhost
  #We do not necessarily need to collect facts about our localhost so gather_facts=false
  gather_facts: no
  #Next line include the file that contains the variables:
  vars_files:
     #vars.yml : file that includes all variables 
   -  vars.yml
     #the 2nd file : includes authentication variables (vcenter_ip,vcenter_username,vcenter_password)
   -  authentification-vmware.yml
  tasks:
   #we elimanited this task after the test
  - name: create folder
    community.vmware.vcenter_folder:
        hostname: "{{ vcenter_ip }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: no
        datacenter_name: "{{ vcenter_datacenter }}"
        folder_name: "{{ vcenter_destination_folder }}"
        folder_type: vm
        state: present
   #----------------Task1---------------------
    
  - name: Clone from template
    vmware_guest:
         hostname: "{{ vcenter_ip}}"
         username: "{{ vcenter_username }}"
         password: "{{ vcenter_password }}"
         #ssl is a security standard tech for establishing  an encrypted link btwn a server & a client
         #next line we will turn off the ssl certifaction
         validate_certs: no
         #folder: dest folder,path to place datastore cluster in.the folder should include the datacenter
         folder_name: "{{ vcenter_destination_folder }}"
         name: '{{ new_vm }}'
         template: nom_du_modèle
         datacenter: "{{ datacenter_name }}"
         cluster: "{{ cluster_name }}"
         #cluster :collection of datastores
         #customization : we use it for OS customization when we clone vm from template
         #The customization is related to vCenter version 
         customization:
            # autologon: true 
             #VM name
             hostname: "{{ server }}"
             dns_servers:
              - "{{ dns_server }}"
             domain: "domain_name"
             joindomain: "domain_name"
             domainadmin: "admin"
             domainadminpassword: "admin"
             #runonce: list of cmds to run at first user logon(specific to windows customization) et il est utilisé pour executer une tache une seule fois 
            
         wait_for_customization: yes 
         hardware: 
           memory_mb: "{{ memory_mb }}"
           num_cpus: "{{ num_cpus }}"
           #hotadd_cpu: ajouter cpu quand la VM est démarrée
           hotadd_cpu: "{{ hot_add_cpu | default('True') }}"
           hotremove_cpu: "{{ hot_remove_cpu | default('True') }}"
           hotadd_memory:  "{{ hot_add_memory | default('False') }}"
           
           #I added these lines (after testing these lines i dosen't work)
           cpu_limit : "{{ cpu_limit_inMHz }}"
           mem_limit: "{{ mem_limit_in_MB }}"
         networks:
          - name: "{{ network_name }}"
            type: static 
            ip: "{{ network_ip }}"
            gateway: "{{ network_gateway }}"
            netmask: "{{ network_mask }}"
            domain:  "domain_name"
            dns_servers:
              - "{{ dns_server }}"
              #the next line means: Wait until vCenter detects an IP address for the virtual machine (wait until the vm into the OS & an ip @ has been assigned to the given NIC)
         wait_for_ip_address: true 
         
   #----------------Task2---------------------    
  - name: Add new disk for the VM
    vmware_guest_disk: 
    #First we need to establish the connection with the VMware vCenter (hostname,user,psswd,validate_certs)
       hostname: "{{ vcenter_ip}}"
       username: "{{ vcenter_username }}"
       password: "{{ vcenter_password }}"
       datacenter: "{{ datacenter_name }}"
       validate_certs: no
       name: "{{ server }}"
       disk: 
        -size_gb:  "{{ disk_size }}"
         #number of scsi bus (or scsi_controller)
         type: "{{ vm_disk_type }}"
         #The name of datastore which will be used for the disk
         datastore: "{{ vm_disk_datastore }}"
         state: present
         scsi_controller: "{{ vm_disk_scsi_controller }}"
         unit_number:  "{{ vm_disk_unit_number }}"
         scsi_type: "{{ vm_disk_scsi_type }}"
    #delegate_to : pour spécifier dans quel machine il faut executer "the task"     
    delegate_to: localhost 
    #Register infos of the disk
    register: disk_facts
    
    
    
    #After finishing the creation of the vm we need to power on the vm to install vm-tools
    
  - name: Power on new VM
    vmware_guest_powerstate:
    hostname: "{{ vcenter_ip }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: False
    name: "{{ server }}"
    state: powered_on
    
    
    
    
    #------------------Installing vmware tools for Windows Server-------------
    #1st: To install vmware tools we need first to copy the iso file and paste it in the destination wanted
    
  - name: Install vmware tools
    block:
       - name: copy vmware tools to temp directory
         win_get_url:
           #url: https://packages.vmware.com/tools/esx/latest/windows/x64/VMware-tools-11.1.1-16303738-x86_64.exe
           url: '{{ vmware_tools_download_url }}'
           #dest: c:\temp\VMware-tools-11.1.1-16303738-x86_64.exe
           dest: '{{ temp_directory  }}'
         register: download_vmwaretools
         until: download_vmwaretools is success
         delay: 5
         retries: 5
      
        #
       - name: install vmware tools
         win_package:
            path: '{{ download_vmware_tools.dest }}'
            arguments: /s /v "/qn reboot=r"
            state: present
         register: vmware_tools_install
          
    rescue:
      - block:
        - name: fail if vmware tools is not downloaded
          fail:
            msg: "no local copy of vmware tools"
          when: download_vmware_tools is not success
    
    
        - name: install vmware tools using win_shell module
           #win-shell to execute a command
          win_shell: '{{ download_vmware_tools.dest }} /s /v "/qn reboot=r"'
          when: download_vmware_tools is success

          #This win_stat: Obtain the info about a file    //It will returns true if it's installed
        - name: check to see vmware tools is installed
          win_stat:
            path: 'C:\Program Files\VMware\VMware Tools\vmtoolsd.exe'
          register: check_vmware_tools_installation
          
        - name: fail if not installed
          fail:
            msg: "vmware tools is not installed.."
          when: not (check_vmware_tools_installation.stat.exists | default(true))
       
        rescue:
          - name:  Install vm_tools for Windows 
            #If Chocolatey is missing from the system, the module will install it.
            win_chocolatey: name=vmware-tools state=present
            when: ansible_distribution == "Windows"
 
   
    
    
            
           

           
         
         
